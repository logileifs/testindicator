#!/usr/bin/env python
from __future__ import print_function
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Notify as notify
from gi.repository import Gtk as gtk
from subprocess import call
import filemon as fm
import sys
import os

import yaml
watch_dir = os.path.abspath(sys.argv[1])

with open(watch_dir + '/test.yml') as f: data = yaml.load(f)


full_cmd = watch_dir + data['test']
excluded_files = data['exclude_files']

APPINDICATOR_ID = 'myappindicator'
indicator = None


def eprint(*args, **kwargs):
	print(*args, file=sys.stderr, **kwargs)


def monitor_dir(callback):
	fmon = fm.FileMon(watch_dir, fm.IN_CLOSE_WRITE, callback, True)
	fmon.start()


def handle_change(evt):
	print('change detected in ' + evt.pathname)
	file_name = evt.pathname.split('/')[-1]
	if file_name in excluded_files:
		return
	inform('Running tests')
	indicator.set_icon(os.path.abspath('yellowlight.png'))
	eprint(evt.maskname + ' detected in ' + evt.pathname)
	eprint('running tests')
	result = call(full_cmd.split())
	eprint('result: %s' % result)
	if result != 0:
		eprint('result = 0')
		indicator.set_icon(os.path.abspath('redlight.png'))
		inform('Tests failed')
	else:
		indicator.set_icon(os.path.abspath('greenlight.png'))
		inform('Tests passed')


def inform(msg):
	notify.Notification.new("<b>Test Indicator</b>", msg, None).show()


def setup_indicator(icon):
	global indicator
	indicator = appindicator.Indicator.new(APPINDICATOR_ID, os.path.abspath(icon), appindicator.IndicatorCategory.SYSTEM_SERVICES)
	indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
	indicator.set_menu(gtk.Menu())
	notify.init(APPINDICATOR_ID)
	gtk.main()


if __name__ == "__main__":
	eprint('watching directory: %s' % watch_dir)
	eprint('full_cmd: %s' % full_cmd)
	eprint('yaml data: %s' % data)
	eprint('test command: %s' % data['test'])
	monitor_dir(handle_change)
	setup_indicator('greenlight.png')
