#!/usr/bin/env python
from __future__ import print_function
from gi.repository import Gtk as gtk
from gi.repository import AppIndicator3 as appindicator
from subprocess import call
import filemon as fm
import sys
import os

import yaml
watch_dir = os.path.abspath(sys.argv[1])

with open(watch_dir + '/test.yml') as f: data = yaml.load(f)


full_cmd = watch_dir + data['test']

APPINDICATOR_ID = 'myappindicator'
indicator = None


def eprint(*args, **kwargs):
	print(*args, file=sys.stderr, **kwargs)


def monitor_dir(callback):
	fmon = fm.FileMon(watch_dir, fm.IN_CLOSE_WRITE, callback, True)
	fmon.start()


def handle_change(evt):
	indicator.set_icon(os.path.abspath('yellowlight.png'))
	eprint(evt.maskname + ' detected in ' + evt.pathname)
	# TODO: run tests
	eprint('running tests')
	result = call(full_cmd.split())
	# TODO: check output
	eprint('result: %s' % result)
	if result != 0:
		eprint('result = 0')
		indicator.set_icon(os.path.abspath('redlight.png'))
	else: indicator.set_icon(os.path.abspath('greenlight.png'))


def setup_indicator(icon):
	global indicator
	indicator = appindicator.Indicator.new(APPINDICATOR_ID, os.path.abspath(icon), appindicator.IndicatorCategory.SYSTEM_SERVICES)
	indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
	indicator.set_menu(gtk.Menu())
	gtk.main()


if __name__ == "__main__":
	eprint('watching directory: %s' % watch_dir)
	eprint('full_cmd: %s' % full_cmd)
	eprint('yaml data: %s' % data)
	eprint('test command: %s' % data['test'])
	monitor_dir(handle_change)
	setup_indicator('greenlight.png')
